// ------------------------------------------------------------------------------
//  <auto-generated>
//      這是由自動程式碼 UI 測試產生器產生的程式碼。
//      版本: 12.0.0.0
//
//      對這個檔案進行變更可能會導致不正確的行為，如果重新產生此程式碼，
//      將會造成檔案遺失。
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace StickyPadTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// 設定類別名稱
        /// </summary>
        public void SetCategoryName()
        {
            #region Variable Declarations
            WinEdit uI_categoryBoxEdit = this.UIStickyPadWindow.UI_categoryBoxWindow.UI_categoryBoxEdit;
            #endregion

            // 在 '_categoryBox' 文字方塊 中輸入 '1234'
            uI_categoryBoxEdit.Text = this.SetCategoryNameParams.UI_categoryBoxEditText;
        }
        
        /// <summary>
        /// 點擊取消按鈕
        /// </summary>
        public void ClickCancelButton()
        {
            #region Variable Declarations
            WinButton uI取消Button = this.UIStickyPadWindow.UI取消Window.UI取消Button;
            #endregion

            // 按一下 '取消' 按鈕
            Mouse.Click(uI取消Button, new Point(34, 11));
        }
        
        /// <summary>
        /// 設定類別顏色
        /// </summary>
        public void ClickColorTextAndSetColor()
        {
            #region Variable Declarations
            WinEdit uI_colorTextBoxEdit = this.UIStickyPadWindow.UI_colorTextBoxWindow.UI_colorTextBoxEdit;
            WinText uI基本色彩BText = this.UI色彩Window.UIItemWindow.UI基本色彩BText;
            WinButton uI確定Button = this.UI色彩Window.UI確定Window.UI確定Button;
            #endregion

            // 按一下 '_colorTextBox' 文字方塊
            Mouse.Click(uI_colorTextBoxEdit, new Point(116, 7));

            // 按一下 '基本色彩(B):' 標籤
            Mouse.Click(uI基本色彩BText, new Point(69, 23));

            // 按一下 '確定' 按鈕
            Mouse.Click(uI確定Button, new Point(40, 15));
        }
        
        /// <summary>
        /// ClickNewCategoryButton
        /// </summary>
        public void ClickNewCategoryButton()
        {
            #region Variable Declarations
            WinButton uI新增Button = this.UIStickyPadWindow.UI新增Window.UI新增Button;
            #endregion

            // 按一下 '新增' 按鈕
            Mouse.Click(uI新增Button, new Point(22, 11));
        }
        
        /// <summary>
        /// 點即刪除按鈕，但是取消刪除
        /// </summary>
        public void ClickDeleteAndCancelButton()
        {
            #region Variable Declarations
            WinCell uIDeleteCell = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row.UIDeleteCell;
            WinButton uI否NButton = this.UIWarningWindow.UI否NWindow.UI否NButton;
            #endregion

            // 按一下 'Delete' 儲存格
            Mouse.Click(uIDeleteCell, new Point(50, 9));

            // 按一下 '否(&N)' 按鈕
            Mouse.Click(uI否NButton, new Point(47, 18));
        }
        
        /// <summary>
        /// 確認刪除類別
        /// </summary>
        public void ClickDeleteAndYesButton()
        {
            #region Variable Declarations
            WinCell uIDeleteCell = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row.UIDeleteCell;
            WinButton uI是YButton = this.UIWarningWindow.UI是YWindow.UI是YButton;
            #endregion

            // 按一下 'Delete' 儲存格
            Mouse.Click(uIDeleteCell, new Point(17, 12));

            // 按一下 '是(&Y)' 按鈕
            Mouse.Click(uI是YButton, new Point(50, 16));
        }
        
        /// <summary>
        /// 檢查類別名稱
        /// </summary>
        public void AssertCategoryName()
        {
            #region Variable Declarations
            WinWindow uI_categoryBoxWindow = this.UIStickyPadWindow.UI_tableLayoutInUpperCWindow.UI_categoryBoxWindow;
            #endregion

            // 驗證 '_categoryBox' 視窗 的屬性 'FriendlyName' 等於 '_categoryBox'
            Assert.AreEqual(this.AssertCategoryNameExpectedValues.UI_categoryBoxWindowFriendlyName, uI_categoryBoxWindow.FriendlyName, "1234");
        }
        
        /// <summary>
        /// 判斷新增按鈕是不是true
        /// </summary>
        public void AssertNewCategoryButtonEnable()
        {
            #region Variable Declarations
            WinWindow uI新增Window = this.UIStickyPadWindow.UI_tableLayoutInUpperCWindow.UI新增Window;
            #endregion

            // 驗證 '新增' 視窗 的屬性 'Enabled' 等於 'true'
            Assert.AreEqual(this.AssertNewCategoryButtonEnableExpectedValues.UI新增WindowEnabled, uI新增Window.Enabled, "判斷新增按鈕是ON的");
        }
        
        /// <summary>
        /// 判斷取消按鈕是否可以按
        /// </summary>
        public void AssertCancelButton()
        {
            #region Variable Declarations
            WinWindow uI取消Window = this.UIStickyPadWindow.UI_tableLayoutInUpperCWindow.UI取消Window;
            #endregion

            // 驗證 '取消' 視窗 的屬性 'Enabled' 等於 'true'
            Assert.AreEqual(this.AssertCancelButtonExpectedValues.UI取消WindowEnabled, uI取消Window.Enabled, "判斷取消按鈕是ON的");
        }
        
        /// <summary>
        /// 檢查第一筆資料是不是1234
        /// </summary>
        public void AssertCategoryDataGridView()
        {
            #region Variable Declarations
            WinRow uI資料列0Row1 = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row1;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '(null);1234;Delete;Edit'
            Assert.AreEqual(this.AssertCategoryDataGridViewExpectedValues.UI資料列0Row1Value, uI資料列0Row1.Value);
        }
        
        /// <summary>
        /// 判斷新增按鈕OFF
        /// </summary>
        public void AssertNewCategoryButtonUnable()
        {
            #region Variable Declarations
            WinWindow uI新增Window = this.UIStickyPadWindow.UI_tableLayoutInUpperCWindow.UI新增Window;
            #endregion

            // 驗證 '新增' 視窗 的屬性 'Enabled' 等於 'False'
            Assert.AreEqual(this.AssertNewCategoryButtonUnableExpectedValues.UI新增WindowEnabled, uI新增Window.Enabled, "判斷新增按鈕OFF");
        }
        
        /// <summary>
        /// 判斷取消按鈕OFF
        /// </summary>
        public void AssertCancelButtonUnable()
        {
            #region Variable Declarations
            WinWindow uI取消Window = this.UIStickyPadWindow.UI_tableLayoutInUpperCWindow.UI取消Window;
            #endregion

            // 驗證 '取消' 視窗 的屬性 'Enabled' 等於 'False'
            Assert.AreEqual(this.AssertCancelButtonUnableExpectedValues.UI取消WindowEnabled, uI取消Window.Enabled, "判斷取消按鈕OFF");
        }
        
        /// <summary>
        /// 跳到便條的TabPage，然後再跳回類別的TabPage
        /// </summary>
        public void ChangeTabPageAndBack()
        {
            #region Variable Declarations
            WinTabPage uI便條清單TabPage = this.UIStickyPadWindow.UI_formTabControlTabList.UI便條清單TabPage;
            WinTabPage uI類別TabPage = this.UIStickyPadWindow.UI_formTabControlTabList.UI類別TabPage;
            #endregion

            // 按一下 '便條清單' 索引標籤
            Mouse.Click(uI便條清單TabPage, new Point(19, 12));

            // 按一下 '類別' 索引標籤
            Mouse.Click(uI類別TabPage, new Point(23, 12));
        }
        
        /// <summary>
        /// 檢查類別資料存不存在
        /// </summary>
        public void AssertEmptyCategoryDataGridView()
        {
            #region Variable Declarations
            WinRow uI資料列0Row1 = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row1;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Exists' 等於 'false'
            Assert.AreEqual(this.AssertEmptyCategoryDataGridViewExpectedValues.UI資料列0Row1Exists, uI資料列0Row1.Exists);
        }
        
        /// <summary>
        /// 進入修改模式
        /// </summary>
        public void ClickEditButtonInCategoryPage()
        {
            #region Variable Declarations
            WinCell uIEditCell = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row.UIEditCell;
            #endregion

            // 按一下 'Edit' 儲存格
            Mouse.Click(uIEditCell, new Point(34, 13));
        }
        
        /// <summary>
        /// 確認修改
        /// </summary>
        public void ClickEditButton()
        {
            #region Variable Declarations
            WinButton uI新增Button = this.UIStickyPadWindow.UI新增Window.UI新增Button;
            #endregion

            // 按一下 '新增' 按鈕
            Mouse.Click(uI新增Button, new Point(26, 15));
        }
        
        /// <summary>
        /// 設定修改的類別名稱
        /// </summary>
        public void SetModifyCategoryName()
        {
            #region Variable Declarations
            WinEdit uI_categoryBoxEdit = this.UIStickyPadWindow.UI_categoryBoxWindow.UI_categoryBoxEdit;
            #endregion

            // 在 '_categoryBox' 文字方塊 中輸入 'asdf'
            uI_categoryBoxEdit.Text = this.SetModifyCategoryNameParams.UI_categoryBoxEditText;
        }
        
        /// <summary>
        /// 檢查修改的類別資料
        /// </summary>
        public void AssertModifyCategoryDataGridView()
        {
            #region Variable Declarations
            WinRow uI資料列0Row1 = this.UIStickyPadWindow.UI_categoryDataGridVieWindow.UI_categoryDataGridVieTable.UI資料列0Row1;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '(null);asdf;Delete;Edit'
            Assert.AreEqual(this.AssertModifyCategoryDataGridViewExpectedValues.UI資料列0Row1Value, uI資料列0Row1.Value);
        }
        
        /// <summary>
        /// 點選便條清單
        /// </summary>
        public void ClcikStickyPadTab()
        {
            #region Variable Declarations
            WinTabPage uI便條清單TabPage = this.UIStickyPadWindow.UI_formTabControlTabList.UI便條清單TabPage;
            #endregion

            // 按一下 '便條清單' 索引標籤
            Mouse.Click(uI便條清單TabPage, new Point(23, 5));
        }
        
        /// <summary>
        /// 切換到類別頁面
        /// </summary>
        public void ClickCategoryTabPage()
        {
            #region Variable Declarations
            WinTabPage uI類別TabPage = this.UIStickyPadWindow.UI_formTabControlTabList.UI類別TabPage;
            #endregion

            // 按一下 '類別' 索引標籤
            Mouse.Click(uI類別TabPage, new Point(17, 10));
        }
        
        /// <summary>
        /// 點擊新增便條的按鈕
        /// </summary>
        public void ClickAdditionButton()
        {
            #region Variable Declarations
            WinButton uI新增便條Button = this.UIStickyPadWindow.UI新增便條Window.UI新增便條Button;
            #endregion

            // 按一下 '新增便條' 按鈕
            Mouse.Click(uI新增便條Button, new Point(57, 14));
        }
        
        /// <summary>
        /// 取消便條清單的新增
        /// </summary>
        public void CancelStickyPadAddition()
        {
            #region Variable Declarations
            WinButton uI取消Button1 = this.UIToDoListAdditionWindWindow.UI取消Window.UI取消Button1;
            #endregion

            // 按一下 '取消' 按鈕
            Mouse.Click(uI取消Button1, new Point(58, 16));
        }
        
        /// <summary>
        /// 設定combobox
        /// </summary>
        public void SetComboBox()
        {
            #region Variable Declarations
            WinComboBox uI_categoryComboBoxComboBox1 = this.UIToDoListAdditionWindWindow.UI_categoryComboBoxWindow.UI_categoryComboBoxComboBox1;
            #endregion

            // 在 '_categoryComboBox' 下拉式方塊 中選取 '1234'
            uI_categoryComboBoxComboBox1.SelectedItem = this.SetComboBoxParams.UI_categoryComboBoxComboBox1SelectedItem;
        }
        
        /// <summary>
        /// 設定便條內容
        /// </summary>
        public void SetStickyPadContent()
        {
            #region Variable Declarations
            WinEdit uI_contentTextBoxEdit1 = this.UIToDoListAdditionWindWindow.UI_contentTextBoxWindow.UI_contentTextBoxEdit1;
            #endregion

            // 在 '_contentTextBox' 文字方塊 中輸入 '0987654321'
            uI_contentTextBoxEdit1.Text = this.SetStickyPadContentParams.UI_contentTextBoxEdit1Text;
        }
        
        /// <summary>
        /// 確認便條新增
        /// </summary>
        public void ConfirmStickyPadAddition()
        {
            #region Variable Declarations
            WinButton uI確定Button1 = this.UIToDoListAdditionWindWindow.UI確定Window.UI確定Button1;
            #endregion

            // 按一下 '確定' 按鈕
            Mouse.Click(uI確定Button1, new Point(36, 15));
        }
        
        /// <summary>
        /// 判斷便條清單是不是空的
        /// </summary>
        public void AssertEmptyStickyPadDataGridView()
        {
            #region Variable Declarations
            WinRow uI資料列0Row = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Exists' 等於 'false'
            Assert.AreEqual(this.AssertEmptyStickyPadDataGridViewExpectedValues.UI資料列0RowExists, uI資料列0Row.Exists);
        }
        
        /// <summary>
        /// 點選便條清單的刪除按鈕
        /// </summary>
        public void ClickDeleteButtonInStickyPadTabPage()
        {
            #region Variable Declarations
            WinCell uIDeleteCell = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1.UIDeleteCell;
            #endregion

            // 按一下 'delete' 儲存格
            Mouse.Click(uIDeleteCell, new Point(32, 8));
        }
        
        /// <summary>
        /// 修改便條內容(1234, lkjhgfdsa)
        /// </summary>
        public void ClickEditButtonAndModifyStickyPadContent()
        {
            #region Variable Declarations
            WinCell uIEditCell = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1.UIEditCell;
            WinEdit uI_contentTextBoxEdit = this.UI修改Window.UIItem0987654321Window.UI_contentTextBoxEdit;
            WinButton uI確定Button = this.UI修改Window.UI確定Window.UI確定Button;
            #endregion

            // 按一下 'edit' 儲存格
            Mouse.Click(uIEditCell, new Point(42, 14));

            // 在 '_contentTextBox' 文字方塊 中輸入 'lkjhgfdsa'
            uI_contentTextBoxEdit.Text = this.ClickEditButtonAndModifyStickyPadContentParams.UI_contentTextBoxEditText;

            // 按一下 '確定' 按鈕
            Mouse.Click(uI確定Button, new Point(29, 14));
        }
        
        /// <summary>
        /// 新增一個測試便條用的類別
        /// </summary>
        public void AddNewCategory()
        {
            #region Variable Declarations
            WinEdit uI_categoryBoxEdit = this.UIStickyPadWindow.UI_categoryBoxWindow.UI_categoryBoxEdit;
            WinEdit uI_colorTextBoxEdit = this.UIStickyPadWindow.UI_colorTextBoxWindow.UI_colorTextBoxEdit;
            WinText uI基本色彩BText = this.UI色彩Window.UIItemWindow.UI基本色彩BText;
            WinButton uI確定Button = this.UI色彩Window.UI確定Window.UI確定Button;
            WinButton uI新增Button = this.UIStickyPadWindow.UI新增Window.UI新增Button;
            #endregion

            // 在 '_categoryBox' 文字方塊 中輸入 'asdf'
            uI_categoryBoxEdit.Text = this.AddNewCategoryParams.UI_categoryBoxEditText;

            // 按一下 '_colorTextBox' 文字方塊
            Mouse.Click(uI_colorTextBoxEdit, new Point(35, 13));

            // 按一下 '基本色彩(B):' 標籤
            Mouse.Click(uI基本色彩BText, new Point(83, 12));

            // 按一下 '確定' 按鈕
            Mouse.Click(uI確定Button, new Point(32, 11));

            // 按一下 '新增' 按鈕
            Mouse.Click(uI新增Button, new Point(21, 9));
        }
        
        /// <summary>
        /// ClickEditButtonAndModifyStickyPadCategory - 使用 'ClickEditButtonAndModifyStickyPadCategoryParams' 將參數傳入這個方法。
        /// </summary>
        public void ClickEditButtonAndModifyStickyPadCategory()
        {
            #region Variable Declarations
            WinCell uIEditCell = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1.UIEditCell;
            WinComboBox uI_categoryComboBoxComboBox = this.UI修改Window.UI_categoryComboBoxWindow.UI_categoryComboBoxComboBox;
            WinButton uI確定Button = this.UI修改Window.UI確定Window.UI確定Button;
            #endregion

            // 按一下 'edit' 儲存格
            Mouse.Click(uIEditCell, new Point(45, 15));

            // 在 '_categoryComboBox' 下拉式方塊 中選取 'asdf'
            uI_categoryComboBoxComboBox.SelectedItem = this.ClickEditButtonAndModifyStickyPadCategoryParams.UI_categoryComboBoxComboBoxSelectedItem;

            // 按一下 '確定' 按鈕
            Mouse.Click(uI確定Button, new Point(50, 9));
        }
        
        /// <summary>
        /// 檢查便條內容是不是1234, 0987654321
        /// </summary>
        public void AssertStickyPadDatagridView()
        {
            #region Variable Declarations
            WinRow uI資料列0Row1 = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '1234;0987654321;delete;edit'
            Assert.AreEqual(this.AssertStickyPadDatagridViewExpectedValues.UI資料列0Row1Value, uI資料列0Row1.Value, "便條內容是1234, 0987654321");
        }
        
        /// <summary>
        /// 檢查是不是(1234, lkjhgfdsa)
        /// </summary>
        public void AssertStickyPadDatagridViewThatChangesContent()
        {
            #region Variable Declarations
            WinRow uI資料列0Row = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '1234;lkjhgfdsa;delete;edit'
            Assert.AreEqual(this.AssertStickyPadDatagridViewThatChangesContentExpectedValues.UI資料列0RowValue, uI資料列0Row.Value, "資料不是(1234, lkjhgfdsa)");
        }
        
        /// <summary>
        /// 檢查便條類別有沒有被修改
        /// </summary>
        public void AssertStickyPadDatagridViewThatChangesCategory()
        {
            #region Variable Declarations
            WinRow uI資料列0Row = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row;
            #endregion

            // 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 'asdf;0987654321;delete;edit'
            Assert.AreEqual(this.AssertStickyPadDatagridViewThatChangesCategoryExpectedValues.UI資料列0RowValue, uI資料列0Row.Value, "不是(asdf, 0987654321)");
        }
        
        /// <summary>
        /// 點選便條內容的cell
        /// </summary>
        public void ClickStickyPadContentCell()
        {
            #region Variable Declarations
            WinCell uIItem0987654321Cell = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1.UIItem0987654321Cell;
            #endregion

            // 按一下 '0987654321' 儲存格
            Mouse.Click(uIItem0987654321Cell, new Point(33, 12));
        }
        
        /// <summary>
        /// 點選便條類別的cell
        /// </summary>
        public void ClickStickyPadCategoryCell()
        {
            #region Variable Declarations
            WinCell uIItem1234Cell = this.UIStickyPadWindow.UI_toDoListDataGridVieWindow.UI_toDoListDataGridVieTable.UI資料列0Row1.UIItem1234Cell;
            #endregion

            // 按一下 '1234' 儲存格
            Mouse.Click(uIItem1234Cell, new Point(40, 12));
        }
        
        /// <summary>
        /// 關閉便條視窗
        /// </summary>
        public void CloseStickyPad()
        {
            #region Variable Declarations
            WinButton uI關閉Button = this.UI便條Window.UI便條TitleBar.UI關閉Button;
            #endregion

            // 按一下 '關閉' 按鈕
            Mouse.Click(uI關閉Button, new Point(23, 9));
        }
        
        /// <summary>
        /// 點選在menu的離開按鈕
        /// </summary>
        public void ClickExitInMenu()
        {
            #region Variable Declarations
            WinMenuItem uI_exitInFileMenuMenuItem = this.UIStickyPadWindow.UI_stickyPadMenuMenuBar.UI_fileMenuMenuItem.UI_exitInFileMenuMenuItem;
            #endregion

            // 按一下 '_fileMenu' -> '_exitInFileMenu' 功能表項目
            Mouse.Click(uI_exitInFileMenuMenuItem, new Point(24, 12));
        }
        
        /// <summary>
        /// 在colorTextBox中輸入資料
        /// </summary>
        public void SetValueInColorTextBox()
        {
            #region Variable Declarations
            WinEdit uI_colorTextBoxEdit = this.UIStickyPadWindow.UI_colorTextBoxWindow.UI_colorTextBoxEdit;
            WinButton uI取消Button = this.UI色彩Window.UI取消Window.UI取消Button;
            #endregion

            // 按一下 '_colorTextBox' 文字方塊
            Mouse.Click(uI_colorTextBoxEdit, new Point(55, 7));

            // 按一下 '取消' 按鈕
            Mouse.Click(uI取消Button, new Point(33, 15));

            // 在 '_colorTextBox' 文字方塊 中輸入 ''
            uI_colorTextBoxEdit.Text = this.SetValueInColorTextBoxParams.UI_colorTextBoxEditText;
        }
        
        #region Properties
        public virtual SetCategoryNameParams SetCategoryNameParams
        {
            get
            {
                if ((this.mSetCategoryNameParams == null))
                {
                    this.mSetCategoryNameParams = new SetCategoryNameParams();
                }
                return this.mSetCategoryNameParams;
            }
        }
        
        public virtual AssertCategoryNameExpectedValues AssertCategoryNameExpectedValues
        {
            get
            {
                if ((this.mAssertCategoryNameExpectedValues == null))
                {
                    this.mAssertCategoryNameExpectedValues = new AssertCategoryNameExpectedValues();
                }
                return this.mAssertCategoryNameExpectedValues;
            }
        }
        
        public virtual AssertNewCategoryButtonEnableExpectedValues AssertNewCategoryButtonEnableExpectedValues
        {
            get
            {
                if ((this.mAssertNewCategoryButtonEnableExpectedValues == null))
                {
                    this.mAssertNewCategoryButtonEnableExpectedValues = new AssertNewCategoryButtonEnableExpectedValues();
                }
                return this.mAssertNewCategoryButtonEnableExpectedValues;
            }
        }
        
        public virtual AssertCancelButtonExpectedValues AssertCancelButtonExpectedValues
        {
            get
            {
                if ((this.mAssertCancelButtonExpectedValues == null))
                {
                    this.mAssertCancelButtonExpectedValues = new AssertCancelButtonExpectedValues();
                }
                return this.mAssertCancelButtonExpectedValues;
            }
        }
        
        public virtual AssertCategoryDataGridViewExpectedValues AssertCategoryDataGridViewExpectedValues
        {
            get
            {
                if ((this.mAssertCategoryDataGridViewExpectedValues == null))
                {
                    this.mAssertCategoryDataGridViewExpectedValues = new AssertCategoryDataGridViewExpectedValues();
                }
                return this.mAssertCategoryDataGridViewExpectedValues;
            }
        }
        
        public virtual AssertNewCategoryButtonUnableExpectedValues AssertNewCategoryButtonUnableExpectedValues
        {
            get
            {
                if ((this.mAssertNewCategoryButtonUnableExpectedValues == null))
                {
                    this.mAssertNewCategoryButtonUnableExpectedValues = new AssertNewCategoryButtonUnableExpectedValues();
                }
                return this.mAssertNewCategoryButtonUnableExpectedValues;
            }
        }
        
        public virtual AssertCancelButtonUnableExpectedValues AssertCancelButtonUnableExpectedValues
        {
            get
            {
                if ((this.mAssertCancelButtonUnableExpectedValues == null))
                {
                    this.mAssertCancelButtonUnableExpectedValues = new AssertCancelButtonUnableExpectedValues();
                }
                return this.mAssertCancelButtonUnableExpectedValues;
            }
        }
        
        public virtual AssertEmptyCategoryDataGridViewExpectedValues AssertEmptyCategoryDataGridViewExpectedValues
        {
            get
            {
                if ((this.mAssertEmptyCategoryDataGridViewExpectedValues == null))
                {
                    this.mAssertEmptyCategoryDataGridViewExpectedValues = new AssertEmptyCategoryDataGridViewExpectedValues();
                }
                return this.mAssertEmptyCategoryDataGridViewExpectedValues;
            }
        }
        
        public virtual SetModifyCategoryNameParams SetModifyCategoryNameParams
        {
            get
            {
                if ((this.mSetModifyCategoryNameParams == null))
                {
                    this.mSetModifyCategoryNameParams = new SetModifyCategoryNameParams();
                }
                return this.mSetModifyCategoryNameParams;
            }
        }
        
        public virtual AssertModifyCategoryDataGridViewExpectedValues AssertModifyCategoryDataGridViewExpectedValues
        {
            get
            {
                if ((this.mAssertModifyCategoryDataGridViewExpectedValues == null))
                {
                    this.mAssertModifyCategoryDataGridViewExpectedValues = new AssertModifyCategoryDataGridViewExpectedValues();
                }
                return this.mAssertModifyCategoryDataGridViewExpectedValues;
            }
        }
        
        public virtual SetComboBoxParams SetComboBoxParams
        {
            get
            {
                if ((this.mSetComboBoxParams == null))
                {
                    this.mSetComboBoxParams = new SetComboBoxParams();
                }
                return this.mSetComboBoxParams;
            }
        }
        
        public virtual SetStickyPadContentParams SetStickyPadContentParams
        {
            get
            {
                if ((this.mSetStickyPadContentParams == null))
                {
                    this.mSetStickyPadContentParams = new SetStickyPadContentParams();
                }
                return this.mSetStickyPadContentParams;
            }
        }
        
        public virtual AssertEmptyStickyPadDataGridViewExpectedValues AssertEmptyStickyPadDataGridViewExpectedValues
        {
            get
            {
                if ((this.mAssertEmptyStickyPadDataGridViewExpectedValues == null))
                {
                    this.mAssertEmptyStickyPadDataGridViewExpectedValues = new AssertEmptyStickyPadDataGridViewExpectedValues();
                }
                return this.mAssertEmptyStickyPadDataGridViewExpectedValues;
            }
        }
        
        public virtual ClickEditButtonAndModifyStickyPadContentParams ClickEditButtonAndModifyStickyPadContentParams
        {
            get
            {
                if ((this.mClickEditButtonAndModifyStickyPadContentParams == null))
                {
                    this.mClickEditButtonAndModifyStickyPadContentParams = new ClickEditButtonAndModifyStickyPadContentParams();
                }
                return this.mClickEditButtonAndModifyStickyPadContentParams;
            }
        }
        
        public virtual AddNewCategoryParams AddNewCategoryParams
        {
            get
            {
                if ((this.mAddNewCategoryParams == null))
                {
                    this.mAddNewCategoryParams = new AddNewCategoryParams();
                }
                return this.mAddNewCategoryParams;
            }
        }
        
        public virtual ClickEditButtonAndModifyStickyPadCategoryParams ClickEditButtonAndModifyStickyPadCategoryParams
        {
            get
            {
                if ((this.mClickEditButtonAndModifyStickyPadCategoryParams == null))
                {
                    this.mClickEditButtonAndModifyStickyPadCategoryParams = new ClickEditButtonAndModifyStickyPadCategoryParams();
                }
                return this.mClickEditButtonAndModifyStickyPadCategoryParams;
            }
        }
        
        public virtual AssertStickyPadDatagridViewExpectedValues AssertStickyPadDatagridViewExpectedValues
        {
            get
            {
                if ((this.mAssertStickyPadDatagridViewExpectedValues == null))
                {
                    this.mAssertStickyPadDatagridViewExpectedValues = new AssertStickyPadDatagridViewExpectedValues();
                }
                return this.mAssertStickyPadDatagridViewExpectedValues;
            }
        }
        
        public virtual AssertStickyPadDatagridViewThatChangesContentExpectedValues AssertStickyPadDatagridViewThatChangesContentExpectedValues
        {
            get
            {
                if ((this.mAssertStickyPadDatagridViewThatChangesContentExpectedValues == null))
                {
                    this.mAssertStickyPadDatagridViewThatChangesContentExpectedValues = new AssertStickyPadDatagridViewThatChangesContentExpectedValues();
                }
                return this.mAssertStickyPadDatagridViewThatChangesContentExpectedValues;
            }
        }
        
        public virtual AssertStickyPadDatagridViewThatChangesCategoryExpectedValues AssertStickyPadDatagridViewThatChangesCategoryExpectedValues
        {
            get
            {
                if ((this.mAssertStickyPadDatagridViewThatChangesCategoryExpectedValues == null))
                {
                    this.mAssertStickyPadDatagridViewThatChangesCategoryExpectedValues = new AssertStickyPadDatagridViewThatChangesCategoryExpectedValues();
                }
                return this.mAssertStickyPadDatagridViewThatChangesCategoryExpectedValues;
            }
        }
        
        public virtual SetValueInColorTextBoxParams SetValueInColorTextBoxParams
        {
            get
            {
                if ((this.mSetValueInColorTextBoxParams == null))
                {
                    this.mSetValueInColorTextBoxParams = new SetValueInColorTextBoxParams();
                }
                return this.mSetValueInColorTextBoxParams;
            }
        }
        
        public UIStickyPadWindow UIStickyPadWindow
        {
            get
            {
                if ((this.mUIStickyPadWindow == null))
                {
                    this.mUIStickyPadWindow = new UIStickyPadWindow();
                }
                return this.mUIStickyPadWindow;
            }
        }
        
        public UI色彩Window UI色彩Window
        {
            get
            {
                if ((this.mUI色彩Window == null))
                {
                    this.mUI色彩Window = new UI色彩Window();
                }
                return this.mUI色彩Window;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UIToDoListAdditionWindWindow UIToDoListAdditionWindWindow
        {
            get
            {
                if ((this.mUIToDoListAdditionWindWindow == null))
                {
                    this.mUIToDoListAdditionWindWindow = new UIToDoListAdditionWindWindow();
                }
                return this.mUIToDoListAdditionWindWindow;
            }
        }
        
        public UI修改Window UI修改Window
        {
            get
            {
                if ((this.mUI修改Window == null))
                {
                    this.mUI修改Window = new UI修改Window();
                }
                return this.mUI修改Window;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UI便條Window UI便條Window
        {
            get
            {
                if ((this.mUI便條Window == null))
                {
                    this.mUI便條Window = new UI便條Window();
                }
                return this.mUI便條Window;
            }
        }
        #endregion
        
        #region Fields
        private SetCategoryNameParams mSetCategoryNameParams;
        
        private AssertCategoryNameExpectedValues mAssertCategoryNameExpectedValues;
        
        private AssertNewCategoryButtonEnableExpectedValues mAssertNewCategoryButtonEnableExpectedValues;
        
        private AssertCancelButtonExpectedValues mAssertCancelButtonExpectedValues;
        
        private AssertCategoryDataGridViewExpectedValues mAssertCategoryDataGridViewExpectedValues;
        
        private AssertNewCategoryButtonUnableExpectedValues mAssertNewCategoryButtonUnableExpectedValues;
        
        private AssertCancelButtonUnableExpectedValues mAssertCancelButtonUnableExpectedValues;
        
        private AssertEmptyCategoryDataGridViewExpectedValues mAssertEmptyCategoryDataGridViewExpectedValues;
        
        private SetModifyCategoryNameParams mSetModifyCategoryNameParams;
        
        private AssertModifyCategoryDataGridViewExpectedValues mAssertModifyCategoryDataGridViewExpectedValues;
        
        private SetComboBoxParams mSetComboBoxParams;
        
        private SetStickyPadContentParams mSetStickyPadContentParams;
        
        private AssertEmptyStickyPadDataGridViewExpectedValues mAssertEmptyStickyPadDataGridViewExpectedValues;
        
        private ClickEditButtonAndModifyStickyPadContentParams mClickEditButtonAndModifyStickyPadContentParams;
        
        private AddNewCategoryParams mAddNewCategoryParams;
        
        private ClickEditButtonAndModifyStickyPadCategoryParams mClickEditButtonAndModifyStickyPadCategoryParams;
        
        private AssertStickyPadDatagridViewExpectedValues mAssertStickyPadDatagridViewExpectedValues;
        
        private AssertStickyPadDatagridViewThatChangesContentExpectedValues mAssertStickyPadDatagridViewThatChangesContentExpectedValues;
        
        private AssertStickyPadDatagridViewThatChangesCategoryExpectedValues mAssertStickyPadDatagridViewThatChangesCategoryExpectedValues;
        
        private SetValueInColorTextBoxParams mSetValueInColorTextBoxParams;
        
        private UIStickyPadWindow mUIStickyPadWindow;
        
        private UI色彩Window mUI色彩Window;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UIToDoListAdditionWindWindow mUIToDoListAdditionWindWindow;
        
        private UI修改Window mUI修改Window;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UI便條Window mUI便條Window;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'SetCategoryName' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class SetCategoryNameParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_categoryBox' 文字方塊 中輸入 '1234'
        /// </summary>
        public string UI_categoryBoxEditText = "1234";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertCategoryName' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertCategoryNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '_categoryBox' 視窗 的屬性 'FriendlyName' 等於 '_categoryBox'
        /// </summary>
        public string UI_categoryBoxWindowFriendlyName = "_categoryBox";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertNewCategoryButtonEnable' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertNewCategoryButtonEnableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '新增' 視窗 的屬性 'Enabled' 等於 'true'
        /// </summary>
        public bool UI新增WindowEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertCancelButton' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertCancelButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '取消' 視窗 的屬性 'Enabled' 等於 'true'
        /// </summary>
        public bool UI取消WindowEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertCategoryDataGridView' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertCategoryDataGridViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '(null);1234;Delete;Edit'
        /// </summary>
        public string UI資料列0Row1Value = "(null);1234;Delete;Edit";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertNewCategoryButtonUnable' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertNewCategoryButtonUnableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '新增' 視窗 的屬性 'Enabled' 等於 'False'
        /// </summary>
        public bool UI新增WindowEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertCancelButtonUnable' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertCancelButtonUnableExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '取消' 視窗 的屬性 'Enabled' 等於 'False'
        /// </summary>
        public bool UI取消WindowEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertEmptyCategoryDataGridView' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertEmptyCategoryDataGridViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Exists' 等於 'false'
        /// </summary>
        public bool UI資料列0Row1Exists = false;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'SetModifyCategoryName' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class SetModifyCategoryNameParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_categoryBox' 文字方塊 中輸入 'asdf'
        /// </summary>
        public string UI_categoryBoxEditText = "asdf";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertModifyCategoryDataGridView' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertModifyCategoryDataGridViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '(null);asdf;Delete;Edit'
        /// </summary>
        public string UI資料列0Row1Value = "(null);asdf;Delete;Edit";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'SetComboBox' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class SetComboBoxParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_categoryComboBox' 下拉式方塊 中選取 '1234'
        /// </summary>
        public string UI_categoryComboBoxComboBox1SelectedItem = "1234";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'SetStickyPadContent' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class SetStickyPadContentParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_contentTextBox' 文字方塊 中輸入 '0987654321'
        /// </summary>
        public string UI_contentTextBoxEdit1Text = "0987654321";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertEmptyStickyPadDataGridView' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertEmptyStickyPadDataGridViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Exists' 等於 'false'
        /// </summary>
        public bool UI資料列0RowExists = false;
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'ClickEditButtonAndModifyStickyPadContent' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class ClickEditButtonAndModifyStickyPadContentParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_contentTextBox' 文字方塊 中輸入 'lkjhgfdsa'
        /// </summary>
        public string UI_contentTextBoxEditText = "lkjhgfdsa";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AddNewCategory' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AddNewCategoryParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_categoryBox' 文字方塊 中輸入 'asdf'
        /// </summary>
        public string UI_categoryBoxEditText = "asdf";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'ClickEditButtonAndModifyStickyPadCategory' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class ClickEditButtonAndModifyStickyPadCategoryParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_categoryComboBox' 下拉式方塊 中選取 'asdf'
        /// </summary>
        public string UI_categoryComboBoxComboBoxSelectedItem = "asdf";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertStickyPadDatagridView' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertStickyPadDatagridViewExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '1234;0987654321;delete;edit'
        /// </summary>
        public string UI資料列0Row1Value = "1234;0987654321;delete;edit";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertStickyPadDatagridViewThatChangesContent' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertStickyPadDatagridViewThatChangesContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 '1234;lkjhgfdsa;delete;edit'
        /// </summary>
        public string UI資料列0RowValue = "1234;lkjhgfdsa;delete;edit";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'AssertStickyPadDatagridViewThatChangesCategory' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class AssertStickyPadDatagridViewThatChangesCategoryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// 驗證 '資料列 0' 資料列 的屬性 'Value' 等於 'asdf;0987654321;delete;edit'
        /// </summary>
        public string UI資料列0RowValue = "asdf;0987654321;delete;edit";
        #endregion
    }
    
    /// <summary>
    /// 即將傳入 'SetValueInColorTextBox' 的參數
    /// </summary>
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class SetValueInColorTextBoxParams
    {
        
        #region Fields
        /// <summary>
        /// 在 '_colorTextBox' 文字方塊 中輸入 ''
        /// </summary>
        public string UI_colorTextBoxEditText = "";
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIStickyPadWindow : WinWindow
    {
        
        public UIStickyPadWindow()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "StickyPad";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public UI_categoryBoxWindow UI_categoryBoxWindow
        {
            get
            {
                if ((this.mUI_categoryBoxWindow == null))
                {
                    this.mUI_categoryBoxWindow = new UI_categoryBoxWindow(this);
                }
                return this.mUI_categoryBoxWindow;
            }
        }
        
        public UI取消Window UI取消Window
        {
            get
            {
                if ((this.mUI取消Window == null))
                {
                    this.mUI取消Window = new UI取消Window(this);
                }
                return this.mUI取消Window;
            }
        }
        
        public UI_colorTextBoxWindow UI_colorTextBoxWindow
        {
            get
            {
                if ((this.mUI_colorTextBoxWindow == null))
                {
                    this.mUI_colorTextBoxWindow = new UI_colorTextBoxWindow(this);
                }
                return this.mUI_colorTextBoxWindow;
            }
        }
        
        public UI新增Window UI新增Window
        {
            get
            {
                if ((this.mUI新增Window == null))
                {
                    this.mUI新增Window = new UI新增Window(this);
                }
                return this.mUI新增Window;
            }
        }
        
        public UI_categoryDataGridVieWindow UI_categoryDataGridVieWindow
        {
            get
            {
                if ((this.mUI_categoryDataGridVieWindow == null))
                {
                    this.mUI_categoryDataGridVieWindow = new UI_categoryDataGridVieWindow(this);
                }
                return this.mUI_categoryDataGridVieWindow;
            }
        }
        
        public UI_tableLayoutInUpperCWindow UI_tableLayoutInUpperCWindow
        {
            get
            {
                if ((this.mUI_tableLayoutInUpperCWindow == null))
                {
                    this.mUI_tableLayoutInUpperCWindow = new UI_tableLayoutInUpperCWindow(this);
                }
                return this.mUI_tableLayoutInUpperCWindow;
            }
        }
        
        public UI_formTabControlTabList UI_formTabControlTabList
        {
            get
            {
                if ((this.mUI_formTabControlTabList == null))
                {
                    this.mUI_formTabControlTabList = new UI_formTabControlTabList(this);
                }
                return this.mUI_formTabControlTabList;
            }
        }
        
        public UI新增便條Window UI新增便條Window
        {
            get
            {
                if ((this.mUI新增便條Window == null))
                {
                    this.mUI新增便條Window = new UI新增便條Window(this);
                }
                return this.mUI新增便條Window;
            }
        }
        
        public UI_toDoListDataGridVieWindow UI_toDoListDataGridVieWindow
        {
            get
            {
                if ((this.mUI_toDoListDataGridVieWindow == null))
                {
                    this.mUI_toDoListDataGridVieWindow = new UI_toDoListDataGridVieWindow(this);
                }
                return this.mUI_toDoListDataGridVieWindow;
            }
        }
        
        public UI_stickyPadMenuMenuBar UI_stickyPadMenuMenuBar
        {
            get
            {
                if ((this.mUI_stickyPadMenuMenuBar == null))
                {
                    this.mUI_stickyPadMenuMenuBar = new UI_stickyPadMenuMenuBar(this);
                }
                return this.mUI_stickyPadMenuMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UI_categoryBoxWindow mUI_categoryBoxWindow;
        
        private UI取消Window mUI取消Window;
        
        private UI_colorTextBoxWindow mUI_colorTextBoxWindow;
        
        private UI新增Window mUI新增Window;
        
        private UI_categoryDataGridVieWindow mUI_categoryDataGridVieWindow;
        
        private UI_tableLayoutInUpperCWindow mUI_tableLayoutInUpperCWindow;
        
        private UI_formTabControlTabList mUI_formTabControlTabList;
        
        private UI新增便條Window mUI新增便條Window;
        
        private UI_toDoListDataGridVieWindow mUI_toDoListDataGridVieWindow;
        
        private UI_stickyPadMenuMenuBar mUI_stickyPadMenuMenuBar;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_categoryBoxWindow : WinWindow
    {
        
        public UI_categoryBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_categoryBox";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_categoryBoxEdit
        {
            get
            {
                if ((this.mUI_categoryBoxEdit == null))
                {
                    this.mUI_categoryBoxEdit = new WinEdit(this);
                    #region 搜尋準則
                    this.mUI_categoryBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "_categoryBox";
                    this.mUI_categoryBoxEdit.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI_categoryBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_categoryBoxEdit;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI取消Window : WinWindow
    {
        
        public UI取消Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cancelButton";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinButton UI取消Button
        {
            get
            {
                if ((this.mUI取消Button == null))
                {
                    this.mUI取消Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI取消Button.SearchProperties[WinButton.PropertyNames.Name] = "_cancelButton";
                    this.mUI取消Button.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI取消Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取消Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_colorTextBoxWindow : WinWindow
    {
        
        public UI_colorTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_colorTextBox";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_colorTextBoxEdit
        {
            get
            {
                if ((this.mUI_colorTextBoxEdit == null))
                {
                    this.mUI_colorTextBoxEdit = new WinEdit(this);
                    #region 搜尋準則
                    this.mUI_colorTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "_colorTextBox";
                    this.mUI_colorTextBoxEdit.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI_colorTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_colorTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI新增Window : WinWindow
    {
        
        public UI新增Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_newCategory";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinButton UI新增Button
        {
            get
            {
                if ((this.mUI新增Button == null))
                {
                    this.mUI新增Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI新增Button.SearchProperties[WinButton.PropertyNames.Name] = "_newCategory";
                    this.mUI新增Button.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI新增Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI新增Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_categoryDataGridVieWindow : WinWindow
    {
        
        public UI_categoryDataGridVieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_categoryDataGridView";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public UI_categoryDataGridVieTable UI_categoryDataGridVieTable
        {
            get
            {
                if ((this.mUI_categoryDataGridVieTable == null))
                {
                    this.mUI_categoryDataGridVieTable = new UI_categoryDataGridVieTable(this);
                }
                return this.mUI_categoryDataGridVieTable;
            }
        }
        #endregion
        
        #region Fields
        private UI_categoryDataGridVieTable mUI_categoryDataGridVieTable;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_categoryDataGridVieTable : WinTable
    {
        
        public UI_categoryDataGridVieTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinTable.PropertyNames.Name] = "_categoryDataGridView";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public UI資料列0Row UI資料列0Row
        {
            get
            {
                if ((this.mUI資料列0Row == null))
                {
                    this.mUI資料列0Row = new UI資料列0Row(this);
                }
                return this.mUI資料列0Row;
            }
        }
        
        public WinRow UI資料列0Row1
        {
            get
            {
                if ((this.mUI資料列0Row1 == null))
                {
                    this.mUI資料列0Row1 = new WinRow(this);
                    #region 搜尋準則
                    this.mUI資料列0Row1.SearchProperties[WinRow.PropertyNames.Name] = "資料列 0";
                    this.mUI資料列0Row1.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI資料列0Row1.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI資料列0Row1;
            }
        }
        #endregion
        
        #region Fields
        private UI資料列0Row mUI資料列0Row;
        
        private WinRow mUI資料列0Row1;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI資料列0Row : WinRow
    {
        
        public UI資料列0Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinRow.PropertyNames.Value] = "(null);1234;Delete;Edit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinCell UIDeleteCell
        {
            get
            {
                if ((this.mUIDeleteCell == null))
                {
                    this.mUIDeleteCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIDeleteCell.SearchProperties[WinCell.PropertyNames.Value] = "Delete";
                    this.mUIDeleteCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIDeleteCell;
            }
        }
        
        public WinCell UIEditCell
        {
            get
            {
                if ((this.mUIEditCell == null))
                {
                    this.mUIEditCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIEditCell.SearchProperties[WinCell.PropertyNames.Value] = "Edit";
                    this.mUIEditCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIEditCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDeleteCell;
        
        private WinCell mUIEditCell;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_tableLayoutInUpperCWindow : WinWindow
    {
        
        public UI_tableLayoutInUpperCWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_tableLayoutInUpperCategoryPage";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinWindow UI_categoryBoxWindow
        {
            get
            {
                if ((this.mUI_categoryBoxWindow == null))
                {
                    this.mUI_categoryBoxWindow = new WinWindow(this);
                    #region 搜尋準則
                    this.mUI_categoryBoxWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "_categoryBox";
                    this.mUI_categoryBoxWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUI_categoryBoxWindow.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI_categoryBoxWindow;
            }
        }
        
        public WinWindow UI新增Window
        {
            get
            {
                if ((this.mUI新增Window == null))
                {
                    this.mUI新增Window = new WinWindow(this);
                    #region 搜尋準則
                    this.mUI新增Window.SearchProperties[WinWindow.PropertyNames.Name] = "新增";
                    this.mUI新增Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    this.mUI新增Window.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI新增Window;
            }
        }
        
        public WinWindow UI取消Window
        {
            get
            {
                if ((this.mUI取消Window == null))
                {
                    this.mUI取消Window = new WinWindow(this);
                    #region 搜尋準則
                    this.mUI取消Window.SearchProperties[WinWindow.PropertyNames.Name] = "取消";
                    this.mUI取消Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.BUTTON", PropertyExpressionOperator.Contains));
                    this.mUI取消Window.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI取消Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUI_categoryBoxWindow;
        
        private WinWindow mUI新增Window;
        
        private WinWindow mUI取消Window;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_formTabControlTabList : WinTabList
    {
        
        public UI_formTabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinTabList.PropertyNames.Name] = "_formTabControl";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinTabPage UI便條清單TabPage
        {
            get
            {
                if ((this.mUI便條清單TabPage == null))
                {
                    this.mUI便條清單TabPage = new WinTabPage(this);
                    #region 搜尋準則
                    this.mUI便條清單TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "便條清單";
                    this.mUI便條清單TabPage.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI便條清單TabPage;
            }
        }
        
        public WinTabPage UI類別TabPage
        {
            get
            {
                if ((this.mUI類別TabPage == null))
                {
                    this.mUI類別TabPage = new WinTabPage(this);
                    #region 搜尋準則
                    this.mUI類別TabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "類別";
                    this.mUI類別TabPage.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI類別TabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUI便條清單TabPage;
        
        private WinTabPage mUI類別TabPage;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI新增便條Window : WinWindow
    {
        
        public UI新增便條Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_messageAddition";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinButton UI新增便條Button
        {
            get
            {
                if ((this.mUI新增便條Button == null))
                {
                    this.mUI新增便條Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI新增便條Button.SearchProperties[WinButton.PropertyNames.Name] = "_messageAddition";
                    this.mUI新增便條Button.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI新增便條Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI新增便條Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_toDoListDataGridVieWindow : WinWindow
    {
        
        public UI_toDoListDataGridVieWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_toDoListDataGridView";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public UI_toDoListDataGridVieTable UI_toDoListDataGridVieTable
        {
            get
            {
                if ((this.mUI_toDoListDataGridVieTable == null))
                {
                    this.mUI_toDoListDataGridVieTable = new UI_toDoListDataGridVieTable(this);
                }
                return this.mUI_toDoListDataGridVieTable;
            }
        }
        #endregion
        
        #region Fields
        private UI_toDoListDataGridVieTable mUI_toDoListDataGridVieTable;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_toDoListDataGridVieTable : WinTable
    {
        
        public UI_toDoListDataGridVieTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinTable.PropertyNames.Name] = "_toDoListDataGridView";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinRow UI資料列0Row
        {
            get
            {
                if ((this.mUI資料列0Row == null))
                {
                    this.mUI資料列0Row = new WinRow(this);
                    #region 搜尋準則
                    this.mUI資料列0Row.SearchProperties[WinRow.PropertyNames.Name] = "資料列 0";
                    this.mUI資料列0Row.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
                    this.mUI資料列0Row.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI資料列0Row;
            }
        }
        
        public UI資料列0Row1 UI資料列0Row1
        {
            get
            {
                if ((this.mUI資料列0Row1 == null))
                {
                    this.mUI資料列0Row1 = new UI資料列0Row1(this);
                }
                return this.mUI資料列0Row1;
            }
        }
        
        public UI資料列0Row2 UI資料列0Row2
        {
            get
            {
                if ((this.mUI資料列0Row2 == null))
                {
                    this.mUI資料列0Row2 = new UI資料列0Row2(this);
                }
                return this.mUI資料列0Row2;
            }
        }
        
        public UI資料列0Row3 UI資料列0Row3
        {
            get
            {
                if ((this.mUI資料列0Row3 == null))
                {
                    this.mUI資料列0Row3 = new UI資料列0Row3(this);
                }
                return this.mUI資料列0Row3;
            }
        }
        #endregion
        
        #region Fields
        private WinRow mUI資料列0Row;
        
        private UI資料列0Row1 mUI資料列0Row1;
        
        private UI資料列0Row2 mUI資料列0Row2;
        
        private UI資料列0Row3 mUI資料列0Row3;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI資料列0Row1 : WinRow
    {
        
        public UI資料列0Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinRow.PropertyNames.Value] = "1234;0987654321;delete;edit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinCell UIDeleteCell
        {
            get
            {
                if ((this.mUIDeleteCell == null))
                {
                    this.mUIDeleteCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIDeleteCell.SearchProperties[WinCell.PropertyNames.Value] = "delete";
                    this.mUIDeleteCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIDeleteCell;
            }
        }
        
        public WinCell UIEditCell
        {
            get
            {
                if ((this.mUIEditCell == null))
                {
                    this.mUIEditCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIEditCell.SearchProperties[WinCell.PropertyNames.Value] = "edit";
                    this.mUIEditCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIEditCell;
            }
        }
        
        public WinCell UIItem0987654321Cell
        {
            get
            {
                if ((this.mUIItem0987654321Cell == null))
                {
                    this.mUIItem0987654321Cell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIItem0987654321Cell.SearchProperties[WinCell.PropertyNames.Value] = "0987654321";
                    this.mUIItem0987654321Cell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIItem0987654321Cell;
            }
        }
        
        public WinCell UIItem1234Cell
        {
            get
            {
                if ((this.mUIItem1234Cell == null))
                {
                    this.mUIItem1234Cell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIItem1234Cell.SearchProperties[WinCell.PropertyNames.Value] = "1234";
                    this.mUIItem1234Cell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIItem1234Cell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIDeleteCell;
        
        private WinCell mUIEditCell;
        
        private WinCell mUIItem0987654321Cell;
        
        private WinCell mUIItem1234Cell;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI資料列0Row2 : WinRow
    {
        
        public UI資料列0Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinRow.PropertyNames.Value] = "1234;lkjhgfdsa;delete;edit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinCell UIEditCell
        {
            get
            {
                if ((this.mUIEditCell == null))
                {
                    this.mUIEditCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIEditCell.SearchProperties[WinCell.PropertyNames.Value] = "edit";
                    this.mUIEditCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIEditCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIEditCell;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI資料列0Row3 : WinRow
    {
        
        public UI資料列0Row3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinRow.PropertyNames.Value] = "asdf;0987654321;delete;edit";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinCell UIEditCell
        {
            get
            {
                if ((this.mUIEditCell == null))
                {
                    this.mUIEditCell = new WinCell(this);
                    #region 搜尋準則
                    this.mUIEditCell.SearchProperties[WinCell.PropertyNames.Value] = "edit";
                    this.mUIEditCell.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUIEditCell;
            }
        }
        #endregion
        
        #region Fields
        private WinCell mUIEditCell;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_stickyPadMenuMenuBar : WinMenuBar
    {
        
        public UI_stickyPadMenuMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinMenu.PropertyNames.Name] = "_stickyPadMenu";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public UI_fileMenuMenuItem UI_fileMenuMenuItem
        {
            get
            {
                if ((this.mUI_fileMenuMenuItem == null))
                {
                    this.mUI_fileMenuMenuItem = new UI_fileMenuMenuItem(this);
                }
                return this.mUI_fileMenuMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UI_fileMenuMenuItem mUI_fileMenuMenuItem;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_fileMenuMenuItem : WinMenuItem
    {
        
        public UI_fileMenuMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "_fileMenu";
            this.WindowTitles.Add("StickyPad");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UI_exitInFileMenuMenuItem
        {
            get
            {
                if ((this.mUI_exitInFileMenuMenuItem == null))
                {
                    this.mUI_exitInFileMenuMenuItem = new WinMenuItem(this);
                    #region 搜尋準則
                    this.mUI_exitInFileMenuMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "_exitInFileMenu";
                    this.mUI_exitInFileMenuMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUI_exitInFileMenuMenuItem.WindowTitles.Add("StickyPad");
                    #endregion
                }
                return this.mUI_exitInFileMenuMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUI_exitInFileMenuMenuItem;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI色彩Window : WinWindow
    {
        
        public UI色彩Window()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "色彩";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("色彩");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UI確定Window UI確定Window
        {
            get
            {
                if ((this.mUI確定Window == null))
                {
                    this.mUI確定Window = new UI確定Window(this);
                }
                return this.mUI確定Window;
            }
        }
        
        public UI取消Window1 UI取消Window
        {
            get
            {
                if ((this.mUI取消Window == null))
                {
                    this.mUI取消Window = new UI取消Window1(this);
                }
                return this.mUI取消Window;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UI確定Window mUI確定Window;
        
        private UI取消Window1 mUI取消Window;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "720";
            this.WindowTitles.Add("色彩");
            #endregion
        }
        
        #region Properties
        public WinText UI基本色彩BText
        {
            get
            {
                if ((this.mUI基本色彩BText == null))
                {
                    this.mUI基本色彩BText = new WinText(this);
                    #region 搜尋準則
                    this.mUI基本色彩BText.SearchProperties[WinText.PropertyNames.Name] = "基本色彩(B):";
                    this.mUI基本色彩BText.WindowTitles.Add("色彩");
                    #endregion
                }
                return this.mUI基本色彩BText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUI基本色彩BText;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI確定Window : WinWindow
    {
        
        public UI確定Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("色彩");
            #endregion
        }
        
        #region Properties
        public WinButton UI確定Button
        {
            get
            {
                if ((this.mUI確定Button == null))
                {
                    this.mUI確定Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI確定Button.SearchProperties[WinButton.PropertyNames.Name] = "確定";
                    this.mUI確定Button.WindowTitles.Add("色彩");
                    #endregion
                }
                return this.mUI確定Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI確定Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI取消Window1 : WinWindow
    {
        
        public UI取消Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("色彩");
            #endregion
        }
        
        #region Properties
        public WinButton UI取消Button
        {
            get
            {
                if ((this.mUI取消Button == null))
                {
                    this.mUI取消Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI取消Button.SearchProperties[WinButton.PropertyNames.Name] = "取消";
                    this.mUI取消Button.WindowTitles.Add("色彩");
                    #endregion
                }
                return this.mUI取消Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取消Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UI否NWindow UI否NWindow
        {
            get
            {
                if ((this.mUI否NWindow == null))
                {
                    this.mUI否NWindow = new UI否NWindow(this);
                }
                return this.mUI否NWindow;
            }
        }
        
        public UI是YWindow UI是YWindow
        {
            get
            {
                if ((this.mUI是YWindow == null))
                {
                    this.mUI是YWindow = new UI是YWindow(this);
                }
                return this.mUI是YWindow;
            }
        }
        #endregion
        
        #region Fields
        private UI否NWindow mUI否NWindow;
        
        private UI是YWindow mUI是YWindow;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI否NWindow : WinWindow
    {
        
        public UI否NWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UI否NButton
        {
            get
            {
                if ((this.mUI否NButton == null))
                {
                    this.mUI否NButton = new WinButton(this);
                    #region 搜尋準則
                    this.mUI否NButton.SearchProperties[WinButton.PropertyNames.Name] = "否(N)";
                    this.mUI否NButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUI否NButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI否NButton;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI是YWindow : WinWindow
    {
        
        public UI是YWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UI是YButton
        {
            get
            {
                if ((this.mUI是YButton == null))
                {
                    this.mUI是YButton = new WinButton(this);
                    #region 搜尋準則
                    this.mUI是YButton.SearchProperties[WinButton.PropertyNames.Name] = "是(Y)";
                    this.mUI是YButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUI是YButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI是YButton;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIToDoListAdditionWindWindow : WinWindow
    {
        
        public UIToDoListAdditionWindWindow()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ToDoListAdditionWindows";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ToDoListAdditionWindows");
            #endregion
        }
        
        #region Properties
        public UI取消Window2 UI取消Window
        {
            get
            {
                if ((this.mUI取消Window == null))
                {
                    this.mUI取消Window = new UI取消Window2(this);
                }
                return this.mUI取消Window;
            }
        }
        
        public UI_categoryComboBoxWindow UI_categoryComboBoxWindow
        {
            get
            {
                if ((this.mUI_categoryComboBoxWindow == null))
                {
                    this.mUI_categoryComboBoxWindow = new UI_categoryComboBoxWindow(this);
                }
                return this.mUI_categoryComboBoxWindow;
            }
        }
        
        public UI_contentTextBoxWindow UI_contentTextBoxWindow
        {
            get
            {
                if ((this.mUI_contentTextBoxWindow == null))
                {
                    this.mUI_contentTextBoxWindow = new UI_contentTextBoxWindow(this);
                }
                return this.mUI_contentTextBoxWindow;
            }
        }
        
        public UI確定Window1 UI確定Window
        {
            get
            {
                if ((this.mUI確定Window == null))
                {
                    this.mUI確定Window = new UI確定Window1(this);
                }
                return this.mUI確定Window;
            }
        }
        #endregion
        
        #region Fields
        private UI取消Window2 mUI取消Window;
        
        private UI_categoryComboBoxWindow mUI_categoryComboBoxWindow;
        
        private UI_contentTextBoxWindow mUI_contentTextBoxWindow;
        
        private UI確定Window1 mUI確定Window;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI取消Window2 : WinWindow
    {
        
        public UI取消Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_cancelButton";
            this.WindowTitles.Add("ToDoListAdditionWindows");
            #endregion
        }
        
        #region Properties
        public WinButton UI取消Button
        {
            get
            {
                if ((this.mUI取消Button == null))
                {
                    this.mUI取消Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI取消Button.SearchProperties[WinButton.PropertyNames.Name] = "取消";
                    this.mUI取消Button.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI取消Button;
            }
        }
        
        public WinButton UI取消Button1
        {
            get
            {
                if ((this.mUI取消Button1 == null))
                {
                    this.mUI取消Button1 = new WinButton(this);
                    #region 搜尋準則
                    this.mUI取消Button1.SearchProperties[WinButton.PropertyNames.Name] = "_cancelButton";
                    this.mUI取消Button1.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI取消Button1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI取消Button;
        
        private WinButton mUI取消Button1;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_categoryComboBoxWindow : WinWindow
    {
        
        public UI_categoryComboBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_categoryComboBox";
            this.WindowTitles.Add("ToDoListAdditionWindows");
            #endregion
        }
        
        #region Properties
        public WinComboBox UI_categoryComboBoxComboBox
        {
            get
            {
                if ((this.mUI_categoryComboBoxComboBox == null))
                {
                    this.mUI_categoryComboBoxComboBox = new WinComboBox(this);
                    #region 搜尋準則
                    this.mUI_categoryComboBoxComboBox.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI_categoryComboBoxComboBox;
            }
        }
        
        public WinComboBox UI_categoryComboBoxComboBox1
        {
            get
            {
                if ((this.mUI_categoryComboBoxComboBox1 == null))
                {
                    this.mUI_categoryComboBoxComboBox1 = new WinComboBox(this);
                    #region 搜尋準則
                    this.mUI_categoryComboBoxComboBox1.SearchProperties[WinComboBox.PropertyNames.Name] = "_categoryComboBox";
                    this.mUI_categoryComboBoxComboBox1.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI_categoryComboBoxComboBox1;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUI_categoryComboBoxComboBox;
        
        private WinComboBox mUI_categoryComboBoxComboBox1;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_contentTextBoxWindow : WinWindow
    {
        
        public UI_contentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_contentTextBox";
            this.WindowTitles.Add("ToDoListAdditionWindows");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_contentTextBoxEdit
        {
            get
            {
                if ((this.mUI_contentTextBoxEdit == null))
                {
                    this.mUI_contentTextBoxEdit = new WinEdit(this);
                    #region 搜尋準則
                    this.mUI_contentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "類別";
                    this.mUI_contentTextBoxEdit.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI_contentTextBoxEdit;
            }
        }
        
        public WinEdit UI_contentTextBoxEdit1
        {
            get
            {
                if ((this.mUI_contentTextBoxEdit1 == null))
                {
                    this.mUI_contentTextBoxEdit1 = new WinEdit(this);
                    #region 搜尋準則
                    this.mUI_contentTextBoxEdit1.SearchProperties[WinEdit.PropertyNames.Name] = "_contentTextBox";
                    this.mUI_contentTextBoxEdit1.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI_contentTextBoxEdit1;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_contentTextBoxEdit;
        
        private WinEdit mUI_contentTextBoxEdit1;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI確定Window1 : WinWindow
    {
        
        public UI確定Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_addButton";
            this.WindowTitles.Add("ToDoListAdditionWindows");
            #endregion
        }
        
        #region Properties
        public WinButton UI確定Button
        {
            get
            {
                if ((this.mUI確定Button == null))
                {
                    this.mUI確定Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI確定Button.SearchProperties[WinButton.PropertyNames.Name] = "確定";
                    this.mUI確定Button.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI確定Button;
            }
        }
        
        public WinButton UI確定Button1
        {
            get
            {
                if ((this.mUI確定Button1 == null))
                {
                    this.mUI確定Button1 = new WinButton(this);
                    #region 搜尋準則
                    this.mUI確定Button1.SearchProperties[WinButton.PropertyNames.Name] = "_addButton";
                    this.mUI確定Button1.WindowTitles.Add("ToDoListAdditionWindows");
                    #endregion
                }
                return this.mUI確定Button1;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI確定Button;
        
        private WinButton mUI確定Button1;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI修改Window : WinWindow
    {
        
        public UI修改Window()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "修改";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("修改");
            #endregion
        }
        
        #region Properties
        public UIItem0987654321Window UIItem0987654321Window
        {
            get
            {
                if ((this.mUIItem0987654321Window == null))
                {
                    this.mUIItem0987654321Window = new UIItem0987654321Window(this);
                }
                return this.mUIItem0987654321Window;
            }
        }
        
        public UI確定Window2 UI確定Window
        {
            get
            {
                if ((this.mUI確定Window == null))
                {
                    this.mUI確定Window = new UI確定Window2(this);
                }
                return this.mUI確定Window;
            }
        }
        
        public UI_categoryComboBoxWindow1 UI_categoryComboBoxWindow
        {
            get
            {
                if ((this.mUI_categoryComboBoxWindow == null))
                {
                    this.mUI_categoryComboBoxWindow = new UI_categoryComboBoxWindow1(this);
                }
                return this.mUI_categoryComboBoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItem0987654321Window mUIItem0987654321Window;
        
        private UI確定Window2 mUI確定Window;
        
        private UI_categoryComboBoxWindow1 mUI_categoryComboBoxWindow;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIItem0987654321Window : WinWindow
    {
        
        public UIItem0987654321Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_contentTextBox";
            this.WindowTitles.Add("修改");
            #endregion
        }
        
        #region Properties
        public WinEdit UI_contentTextBoxEdit
        {
            get
            {
                if ((this.mUI_contentTextBoxEdit == null))
                {
                    this.mUI_contentTextBoxEdit = new WinEdit(this);
                    #region 搜尋準則
                    this.mUI_contentTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "_contentTextBox";
                    this.mUI_contentTextBoxEdit.WindowTitles.Add("修改");
                    #endregion
                }
                return this.mUI_contentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUI_contentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI確定Window2 : WinWindow
    {
        
        public UI確定Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_addButton";
            this.WindowTitles.Add("修改");
            #endregion
        }
        
        #region Properties
        public WinButton UI確定Button
        {
            get
            {
                if ((this.mUI確定Button == null))
                {
                    this.mUI確定Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI確定Button.SearchProperties[WinButton.PropertyNames.Name] = "_addButton";
                    this.mUI確定Button.WindowTitles.Add("修改");
                    #endregion
                }
                return this.mUI確定Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI確定Button;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI_categoryComboBoxWindow1 : WinWindow
    {
        
        public UI_categoryComboBoxWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_categoryComboBox";
            this.WindowTitles.Add("修改");
            #endregion
        }
        
        #region Properties
        public WinComboBox UI_categoryComboBoxComboBox
        {
            get
            {
                if ((this.mUI_categoryComboBoxComboBox == null))
                {
                    this.mUI_categoryComboBoxComboBox = new WinComboBox(this);
                    #region 搜尋準則
                    this.mUI_categoryComboBoxComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "_categoryComboBox";
                    this.mUI_categoryComboBoxComboBox.WindowTitles.Add("修改");
                    #endregion
                }
                return this.mUI_categoryComboBoxComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUI_categoryComboBoxComboBox;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "桌面";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinClient UI桌面Client
        {
            get
            {
                if ((this.mUI桌面Client == null))
                {
                    this.mUI桌面Client = new WinClient(this);
                    #region 搜尋準則
                    this.mUI桌面Client.SearchProperties[WinControl.PropertyNames.Name] = "桌面";
                    #endregion
                }
                return this.mUI桌面Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUI桌面Client;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI便條Window : WinWindow
    {
        
        public UI便條Window()
        {
            #region 搜尋準則
            this.SearchProperties[WinWindow.PropertyNames.Name] = "便條";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("便條");
            #endregion
        }
        
        #region Properties
        public UI便條TitleBar UI便條TitleBar
        {
            get
            {
                if ((this.mUI便條TitleBar == null))
                {
                    this.mUI便條TitleBar = new UI便條TitleBar(this);
                }
                return this.mUI便條TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UI便條TitleBar mUI便條TitleBar;
        #endregion
    }
    
    [GeneratedCode("自動程式碼 UI 測試產生器", "12.0.31101.0")]
    public class UI便條TitleBar : WinTitleBar
    {
        
        public UI便條TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region 搜尋準則
            this.WindowTitles.Add("便條");
            #endregion
        }
        
        #region Properties
        public WinButton UI關閉Button
        {
            get
            {
                if ((this.mUI關閉Button == null))
                {
                    this.mUI關閉Button = new WinButton(this);
                    #region 搜尋準則
                    this.mUI關閉Button.SearchProperties[WinButton.PropertyNames.Name] = "關閉";
                    this.mUI關閉Button.WindowTitles.Add("便條");
                    #endregion
                }
                return this.mUI關閉Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUI關閉Button;
        #endregion
    }
}
